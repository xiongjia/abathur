# -*- mode: org; mode: auto-fill -*-
#+TITLE: Track
#+AUTHOR: xiong-jia.le
#+EMAIL: lexiongjia@gmail.com
#+OPTIONS: title:nil num:nil ^:nil
#+HTML_INCLUDE_STYLE: nil
#+HTML_DOCTYPE: <!doctype html>
#+HTML_HEAD: <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
#+HTML_HEAD: <meta http-equiv="cache-control" content="max-age=0" />
#+HTML_HEAD: <meta http-equiv="cache-control" content="no-cache" />
#+HTML_HEAD: <meta http-equiv="expires" content="0" />
#+HTML_HEAD: <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
#+HTML_HEAD: <meta http-equiv="pragma" content="no-cache" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/assets/css/main_v0.1.css" /> 

记录一些解决过的坑，问题 (开始自 2017 年)

* Database
** PostgreSQL
- PostgreSQL 9.3.x JSON Element Parse issue
  - 问题
    - server log 里有这样的 error log: "cannot extract element from a scalar" 
    - 本地没有重现：本地 pg 已经升到了 pg 9.4+ ；另一个原因是没有正确的测试数据
    - 从实际数据库中用 "\copy" 把错误的库导出到 .csv 再导入到本地的 pg 9.3.x 来重现问题
  - 原因
    - 在 9.3.x 中下面这些 SQL 会引起 "cannot extract element from a scalar" 错误，
      但 9.4+ 中不会错误
      - "SELECT ('123'::json)->>'key' AS data;" , 9.3.x 不能从 number json 取 key
      - "SELECT (null::json)->>'key' AS data;", 9.3.x 不能从 null json 取 key
  - 解决
    - 显然不能让 server 升级 pg version, 只能修改 SQL。
      使用 "json_extract_path_text()" / json_extract_path()" , 9.3+ 
      都可以保证得到 json object 的某个 key。
      比如： "SELECT json_extract_path_text('123'::json, 'key') AS data;"

* Node.js
- request 发送 form data 的 post 请求时固定发生 Connection timeout error
  - 问题
    - 用 node.js request 发送文件到 server 用的是 post form data 的方式，有时会
      出现 connection timeout。网路没有问题，文件也不是很大。实现大概如下: 
      #+BEGIN_SRC javascript
      const formData = {
        file: fs.createReadStream('the file name')
      };
      request.post({url:'https://test-site.com/upload', formData: formData }, (err) => {
        /* got the timeout error here */
      });
      #+END_SRC
  - 原因
    - client 的代码有一些失败的 retry, 当 server 返回 500 等错误时。client 会在
      发一次。
    - server 检查 file format，正好第一个请求 upload 了错误的文件。
    - Client 再 retry request post 时没有重新 create stream 导致 connection
      timeout
  - 解决
    - 可以在 retry 时 re-create stream，不过再发一次意义不大。所以最后的修改时检
      查错误和请求类型放弃 retry。

* Java
- 厂内某基于 Akka 系统，运行数小时或一天规律的发生 Out of memory exception
  - 问题
    - 自己模仿调用 Akka 测试，并不发生 memory leak。所以猜测是系统中某错误调用导
      致。也确认了不是 Akka 版本问题。
    - 试图用增大 =-Xmx= 的 workaround。但是也只是延长了系统工作时间，最后仍
      然会出现 Out of memory。
  - 解决
    - 用 jmap 监视运行过程中哪些 class 的 instances 在过多的分配。比如: =jmap
      -histo:live <jvm pid>=
    - 发生 memory leak 后用 jmap dump 出 jvm 的 memory。比如: =jmap -dump:file=<dump
      file> <jvm pid>=
    - 用 Memory Analyzer (MAT) 或其它 tools 分析 dump file。
    - 根据分析的结果，在一些位置加 logger 
    - 最后发现有个原本只该发生一次的事件，发生了无数次。改对这处就没有之前的
      memory leak 了。
